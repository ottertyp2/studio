
{
  "entities": {
    "SensorReading": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "SensorReading",
      "type": "object",
      "description": "Represents a single sensor reading with its value and timestamp.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the sensor reading."
        },
        "value": {
          "type": "number",
          "description": "The value of the sensor reading. The unit depends on the current configuration of the BioThrust dashboard."
        },
        "timestamp": {
          "type": "string",
          "description": "The timestamp of when the sensor reading was recorded, in ISO 8601 format.",
          "format": "date-time"
        }
      },
      "required": [
        "id",
        "value",
        "timestamp"
      ]
    },
    "SensorConfiguration": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "SensorConfiguration",
      "type": "object",
      "description": "Represents the configuration settings for the sensor, including mode, unit, and custom values.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the sensor configuration."
        },
        "mode": {
          "type": "string",
          "description": "The display mode of the sensor (RAW, VOLTAGE, CUSTOM).",
          "format": "string"
        },
        "unit": {
          "type": "string",
          "description": "The unit of measurement for the sensor (e.g., RAW, V, bar).",
          "format": "string"
        },
        "minValue": {
          "type": "number",
          "description": "The minimum value for the sensor in custom mode.",
          "format": "number"
        },
        "maxValue": {
          "type": "number",
          "description": "The maximum value for the sensor in custom mode.",
          "format": "number"
        },
        "arduinoVoltage": {
          "type": "number",
          "description": "The reference voltage for the Arduino in voltage mode.",
          "format": "number"
        }
      },
      "required": [
        "id",
        "mode",
        "unit",
        "minValue",
        "maxValue",
        "arduinoVoltage"
      ]
    },
    "LeakAnalysis": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "LeakAnalysis",
      "type": "object",
      "description": "Represents the result of a leak analysis performed on sensor data.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the leak analysis."
        },
        "analysisModel": {
          "type": "string",
          "description": "The analysis model used for leak detection (linear_leak, nonlinear_leak).",
          "format": "string"
        },
        "startThreshold": {
          "type": "number",
          "description": "The start threshold value for the leak analysis.",
          "format": "number"
        },
        "endThreshold": {
          "type": "number",
          "description": "The end threshold value for the leak analysis.",
          "format": "number"
        },
        "sensitivity": {
          "type": "number",
          "description": "The sensitivity value (RÂ²) used for the leak analysis.",
          "format": "number"
        },
        "result": {
          "type": "string",
          "description": "The result of the leak analysis (e.g., Leak Likely, Diffusion Likely).",
          "format": "string"
        },
        "analyzedRange": {
          "type": "string",
          "description": "A description of data range that was used when running the leak analysis tool.",
          "format": "string"
        }
      },
      "required": [
        "id",
        "analysisModel",
        "startThreshold",
        "endThreshold",
        "sensitivity",
        "result"
      ]
    },
    "Product": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Product",
      "type": "object",
      "description": "Represents a product that can be tested.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the product."
        },
        "name": {
          "type": "string",
          "description": "The name of the product."
        }
      },
      "required": [
        "id",
        "name"
      ]
    },
    "TestBench": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "TestBench",
      "type": "object",
      "description": "Represents a physical test bench where tests are conducted.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the test bench."
        },
        "name": {
          "type": "string",
          "description": "The name of the test bench."
        },
        "location": {
          "type": "string",
          "description": "The physical location of the test bench (e.g., Lab A, Room 101)."
        },
        "description": {
          "type": "string",
          "description": "A brief description of the test bench's capabilities."
        }
      },
      "required": [
        "id",
        "name"
      ]
    },
    "User": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "User",
      "type": "object",
      "description": "Represents a user profile.",
      "properties": {
        "id": {
          "type": "string",
          "description": "The user's unique ID, matching their Firebase Auth UID."
        },
        "username": {
          "type": "string",
          "description": "The user's chosen username."
        },
        "email": {
          "type": "string",
          "description": "The user's email address."
        },
        "role": {
          "type": "string",
          "description": "The user's role (e.g., 'user', 'superadmin')."
        }
      },
      "required": ["id", "username", "email", "role"]
    },
    "MLModel": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "MLModel",
      "type": "object",
      "description": "Represents a machine learning model.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the ML model."
        },
        "name": {
          "type": "string",
          "description": "The name of the model."
        },
        "version": {
          "type": "string",
          "description": "The version of the model."
        },
        "description": {
          "type": "string",
          "description": "A brief description of the model."
        },
        "fileSize": {
          "type": "number",
          "description": "The size of the model file in bytes."
        }
      },
      "required": [
        "id",
        "name",
        "version"
      ]
    }
  },
  "auth": {
    "providers": [
      "password",
      "anonymous"
    ]
  },
  "firestore": {
    "structure": [
      {
        "path": "/users/{userId}",
        "definition": {
          "entityName": "User",
          "schema": {
            "$ref": "#/backend/entities/User"
          },
          "description": "Allows authenticated users to read user profiles for UI elements like dropdowns and lists. Client-side writes are disallowed.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier for the user."
            }
          ]
        }
      },
      {
        "path": "/users/{userId}/sensorConfigurations/{sensorConfigurationId}",
        "definition": {
          "entityName": "SensorConfiguration",
          "schema": {
            "$ref": "#/backend/entities/SensorConfiguration"
          },
          "description": "Stores sensor configurations specific to each user. For development, all authenticated users can read/write.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier for the user."
            },
            {
              "name": "sensorConfigurationId",
              "description": "The unique identifier for the sensor configuration."
            }
          ]
        }
      },
      {
        "path": "/users/{userId}/leakAnalyses/{leakAnalysisId}",
        "definition": {
          "entityName": "LeakAnalysis",
          "schema": {
            "$ref": "#/backend/entities/LeakAnalysis"
          },
          "description": "Stores leak analysis results specific to each user. For development, all authenticated users can read/write.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier for the user."
            },
            {
              "name": "leakAnalysisId",
              "description": "The unique identifier for the leak analysis."
            }
          ]
        }
      },
      {
        "path": "/sensorReadings/{sensorReadingId}",
        "definition": {
          "entityName": "SensorReading",
          "schema": {
            "$ref": "#/backend/entities/SensorReading"
          },
          "description": "Stores sensor readings. For development, all authenticated users can read/write.",
          "params": [
            {
              "name": "sensorReadingId",
              "description": "The unique identifier for the sensor reading."
            }
          ]
        }
      },
      {
        "path": "/products/{productId}",
        "definition": {
          "entityName": "Product",
          "schema": {
            "$ref": "#/backend/entities/Product"
          },
          "description": "Stores product information. For development, all authenticated users can read, create, and delete products.",
          "params": [
            {
              "name": "productId",
              "description": "The unique identifier for the product."
            }
          ]
        }
      },
      {
        "path": "/testbenches/{testBenchId}",
        "definition": {
          "entityName": "TestBench",
          "schema": {
            "$ref": "#/backend/entities/TestBench"
          },
          "description": "Stores test bench information. For development, all authenticated users can read, create, and delete test benches.",
          "params": [
            {
              "name": "testBenchId",
              "description": "The unique identifier for the test bench."
            }
          ]
        }
      },
      {
        "path": "/mlModels/{mlModelId}",
        "definition": {
          "entityName": "MLModel",
          "schema": {
            "$ref": "#/backend/entities/MLModel"
          },
          "description": "Stores machine learning models. For development, all authenticated users can read and write.",
          "params": [
            {
              "name": "mlModelId",
              "description": "The unique identifier for the machine learning model."
            }
          ]
        }
      }
    ],
    "reasoning": "The Firestore structure is designed for open development and demonstration. To prevent permission errors during this phase, all collections are configured to allow read and write access for any authenticated user. This simplifies development by removing security rule complexities, with the understanding that these rules would need to be properly secured for a production environment.\n\n- **/users/{userId}/**: User-specific data is nested under the user's ID, but remains accessible to any logged-in user during development.\n- **/sensorReadings/{sensorReadingId}**: Open access for real-time data visualization.\n- **/products/{productId}**: Open access for product management.\n- **/testbenches/{testBenchId}**: Open access for managing test benches.\n- **/mlModels/{mlModelId}**: Open access for managing ML models."
  }
}
