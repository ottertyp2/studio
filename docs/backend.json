{
  "entities": {
    "SensorReading": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "SensorReading",
      "type": "object",
      "description": "Represents a single sensor reading with its value and timestamp.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the sensor reading."
        },
        "value": {
          "type": "number",
          "description": "The value of the sensor reading. The unit depends on the current configuration of the BioThrust dashboard."
        },
        "timestamp": {
          "type": "string",
          "description": "The timestamp of when the sensor reading was recorded, in ISO 8601 format.",
          "format": "date-time"
        }
      },
      "required": [
        "id",
        "value",
        "timestamp"
      ]
    },
    "SensorConfiguration": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "SensorConfiguration",
      "type": "object",
      "description": "Represents the configuration settings for the sensor, including mode, unit, and custom values.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the sensor configuration."
        },
        "mode": {
          "type": "string",
          "description": "The display mode of the sensor (RAW, VOLTAGE, CUSTOM).",
          "format": "string"
        },
        "unit": {
          "type": "string",
          "description": "The unit of measurement for the sensor (e.g., RAW, V, bar).",
          "format": "string"
        },
        "minValue": {
          "type": "number",
          "description": "The minimum value for the sensor in custom mode.",
          "format": "number"
        },
        "maxValue": {
          "type": "number",
          "description": "The maximum value for the sensor in custom mode.",
          "format": "number"
        },
        "arduinoVoltage": {
          "type": "number",
          "description": "The reference voltage for the Arduino in voltage mode.",
          "format": "number"
        }
      },
      "required": [
        "id",
        "mode",
        "unit",
        "minValue",
        "maxValue",
        "arduinoVoltage"
      ]
    },
    "LeakAnalysis": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "LeakAnalysis",
      "type": "object",
      "description": "Represents the result of a leak analysis performed on sensor data.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the leak analysis."
        },
        "analysisModel": {
          "type": "string",
          "description": "The analysis model used for leak detection (linear_leak, nonlinear_leak).",
          "format": "string"
        },
        "startThreshold": {
          "type": "number",
          "description": "The start threshold value for the leak analysis.",
          "format": "number"
        },
        "endThreshold": {
          "type": "number",
          "description": "The end threshold value for the leak analysis.",
          "format": "number"
        },
        "sensitivity": {
          "type": "number",
          "description": "The sensitivity value (RÂ²) used for the leak analysis.",
          "format": "number"
        },
        "result": {
          "type": "string",
          "description": "The result of the leak analysis (e.g., Leak Likely, Diffusion Likely).",
          "format": "string"
        },
        "analyzedRange": {
          "type": "string",
          "description": "A description of data range that was used when running the leak analysis tool.",
          "format": "string"
        }
      },
      "required": [
        "id",
        "analysisModel",
        "startThreshold",
        "endThreshold",
        "sensitivity",
        "result"
      ]
    }
  },
  "auth": {
    "providers": [
      "password",
      "anonymous"
    ]
  },
  "firestore": {
    "structure": [
      {
        "path": "/users/{userId}/sensorConfigurations/{sensorConfigurationId}",
        "definition": {
          "entityName": "SensorConfiguration",
          "schema": {
            "$ref": "#/backend/entities/SensorConfiguration"
          },
          "description": "Stores sensor configurations specific to each user.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier for the user."
            },
            {
              "name": "sensorConfigurationId",
              "description": "The unique identifier for the sensor configuration."
            }
          ]
        }
      },
      {
        "path": "/users/{userId}/leakAnalyses/{leakAnalysisId}",
        "definition": {
          "entityName": "LeakAnalysis",
          "schema": {
            "$ref": "#/backend/entities/LeakAnalysis"
          },
          "description": "Stores leak analysis results specific to each user.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier for the user."
            },
            {
              "name": "leakAnalysisId",
              "description": "The unique identifier for the leak analysis."
            }
          ]
        }
      },
      {
        "path": "/sensorReadings/{sensorReadingId}",
        "definition": {
          "entityName": "SensorReading",
          "schema": {
            "$ref": "#/backend/entities/SensorReading"
          },
          "description": "Stores sensor readings.  No ownership is assumed as the data is considered ephemeral and primarily for real-time visualization.",
          "params": [
            {
              "name": "sensorReadingId",
              "description": "The unique identifier for the sensor reading."
            }
          ]
        }
      }
    ],
    "reasoning": "The Firestore structure is designed to store sensor readings, configurations, and leak analyses for the BioThrust dashboard. It prioritizes authorization independence and supports secure list operations. User-specific sensor configurations and leak analysis results are stored under the user's document to ensure private data isolation.\n\n*   **/users/{userId}/sensorConfigurations/{sensorConfigurationId}**: Each user has their sensor configurations. This ensures that configurations are private to the user and avoids mixing different access needs.\n*   **/users/{userId}/leakAnalyses/{leakAnalysisId}**: Leak analysis results are stored under the user's document, keeping them private.\n*   **/sensorReadings/{sensorReadingId}**: All sensor readings are stored in a single collection. No ownership is assumed as the data is considered ephemeral and primarily for real-time visualization."
  }
}