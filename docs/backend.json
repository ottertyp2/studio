{
  "entities": {
    "SensorData": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "SensorData",
      "type": "object",
      "description": "Represents a single sensor data point.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the sensor data point."
        },
        "timestamp": {
          "type": "string",
          "description": "Timestamp of when the sensor data was recorded.",
          "format": "date-time"
        },
        "value": {
          "type": "number",
          "description": "The raw sensor value."
        },
        "convertedValue": {
          "type": "number",
          "description": "The sensor value after conversion (e.g., voltage, custom unit)."
        },
        "unit": {
          "type": "string",
          "description": "The unit of measurement for the sensor data (e.g., RAW, V, bar)."
        },
        "sensorConfigId": {
          "type": "string",
          "description": "Reference to SensorConfiguration. (Relationship: SensorConfiguration 1:N SensorData)"
        }
      },
      "required": [
        "id",
        "timestamp",
        "value",
        "convertedValue",
        "unit",
        "sensorConfigId"
      ]
    },
    "SensorConfiguration": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "SensorConfiguration",
      "type": "object",
      "description": "Represents the configuration settings for a sensor.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the sensor configuration."
        },
        "mode": {
          "type": "string",
          "description": "The display mode of the sensor (RAW, VOLTAGE, CUSTOM)."
        },
        "arduinoVoltage": {
          "type": "number",
          "description": "The reference voltage of the Arduino (used for voltage conversion)."
        },
        "customUnit": {
          "type": "string",
          "description": "The custom unit of measurement for the sensor (used in CUSTOM mode)."
        },
        "minValue": {
          "type": "number",
          "description": "The minimum value for the sensor (used in CUSTOM mode)."
        },
        "maxValue": {
          "type": "number",
          "description": "The maximum value for the sensor (used in CUSTOM mode)."
        }
      },
      "required": [
        "id",
        "mode",
        "arduinoVoltage",
        "customUnit",
        "minValue",
        "maxValue"
      ]
    },
    "AnalysisResult": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "AnalysisResult",
      "type": "object",
      "description": "Represents the result of a leak analysis.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the analysis result."
        },
        "analysisModel": {
          "type": "string",
          "description": "The analysis model used (linear_leak, nonlinear_leak)."
        },
        "rSquared": {
          "type": "number",
          "description": "The R-squared value of the analysis."
        },
        "analyzedRangeStart": {
          "type": "string",
          "description": "Timestamp of the start of the analyzed data range.",
          "format": "date-time"
        },
        "analyzedRangeEnd": {
          "type": "string",
          "description": "Timestamp of the end of the analyzed data range.",
          "format": "date-time"
        },
        "isLeak": {
          "type": "boolean",
          "description": "Indicates whether a leak was detected."
        }
      },
      "required": [
        "id",
        "analysisModel",
        "rSquared",
        "analyzedRangeStart",
        "analyzedRangeEnd",
        "isLeak"
      ]
    }
  },
  "auth": {
    "providers": [
      "password",
      "anonymous"
    ]
  },
  "firestore": {
    "structure": [
      {
        "path": "/users/{userId}/sensor_configurations/{sensorConfigurationId}/sensor_data/{sensorDataId}",
        "definition": {
          "entityName": "SensorData",
          "schema": {
            "$ref": "#/backend/entities/SensorData"
          },
          "description": "Stores sensor data points associated with a specific sensor configuration owned by a user.  Data is isolated to authenticated user via path based ownership",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier of the user."
            },
            {
              "name": "sensorConfigurationId",
              "description": "The unique identifier of the sensor configuration."
            },
            {
              "name": "sensorDataId",
              "description": "The unique identifier of the sensor data point."
            }
          ]
        }
      },
      {
        "path": "/users/{userId}/sensor_configurations/{sensorConfigurationId}",
        "definition": {
          "entityName": "SensorConfiguration",
          "schema": {
            "$ref": "#/backend/entities/SensorConfiguration"
          },
          "description": "Stores sensor configurations owned by a specific user. Data is isolated to authenticated user via path based ownership",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier of the user."
            },
            {
              "name": "sensorConfigurationId",
              "description": "The unique identifier of the sensor configuration."
            }
          ]
        }
      },
      {
        "path": "/users/{userId}/analysis_results/{analysisResultId}",
        "definition": {
          "entityName": "AnalysisResult",
          "schema": {
            "$ref": "#/backend/entities/AnalysisResult"
          },
          "description": "Stores leak analysis results generated from a user's sensor data. Data is isolated to authenticated user via path based ownership.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier of the user."
            },
            {
              "name": "analysisResultId",
              "description": "The unique identifier of the analysis result."
            }
          ]
        }
      }
    ],
    "reasoning": "This Firestore data structure is designed to support the BioThrust Dashboard application, focusing on real-time sensor data collection, storage, and analysis. The design prioritizes Authorization Independence, clarity, and scalability.\n\n**Authorization Independence and QAPs:**\n\n*   The structure utilizes Path-Based Ownership. All sensor data is stored under a top-level `users/{userId}` collection, ensuring that only the authenticated user can read and write their own data. This avoids the need for complex security rules that rely on `get()` calls, thus satisfying Authorization Independence.\n*   The `sensor_configurations` are also stored under a user id collection, which allows only the current authenticated user to access and read the data and associated data points.\n*   This structure supports secure `list` operations (QAPs) because listing the sensor data under `/users/{userId}/sensor_configurations/{sensorConfigurationId}/sensor_data` only returns data accessible to the authenticated user.\n\n**Details:**\n\n*   **/users/{userId}/sensor_configurations/{sensorConfigurationId}/sensor_data/{sensorDataId}**: Stores the time-series sensor data for a given sensor configuration owned by a specific user. The structure is designed to allow only the authenticated user to read and write their own sensor data.\n*   **/users/{userId}/sensor_configurations/{sensorConfigurationId}**: Stores sensor configurations that are owned by a specific user. A single SensorConfiguration can have many SensorData entries. This structure enforces single ownership and isolation of data via path-based rules.\n*   **/users/{userId}/analysis_results/{analysisResultId}**: Stores the results of the leak analysis performed on sensor data owned by a specific user. Like the other collections, access is restricted to the user's own data."
  }
}