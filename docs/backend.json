
{
  "entities": {
    "SensorReading": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "SensorReading",
      "type": "object",
      "description": "Represents a single sensor reading with its value and timestamp.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the sensor reading."
        },
        "value": {
          "type": "number",
          "description": "The value of the sensor reading. The unit depends on the current configuration of the BioThrust dashboard."
        },
        "timestamp": {
          "type": "string",
          "description": "The timestamp of when the sensor reading was recorded, in ISO 8601 format.",
          "format": "date-time"
        }
      },
      "required": [
        "id",
        "value",
        "timestamp"
      ]
    },
    "SensorConfiguration": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "SensorConfiguration",
      "type": "object",
      "description": "Represents the configuration settings for the sensor, including mode, unit, and custom values.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the sensor configuration."
        },
        "mode": {
          "type": "string",
          "description": "The display mode of the sensor (RAW, VOLTAGE, CUSTOM).",
          "format": "string"
        },
        "unit": {
          "type": "string",
          "description": "The unit of measurement for the sensor (e.g., RAW, V, bar).",
          "format": "string"
        },
        "minValue": {
          "type": "number",
          "description": "The minimum value for the sensor in custom mode.",
          "format": "number"
        },
        "maxValue": {
          "type": "number",
          "description": "The maximum value for the sensor in custom mode.",
          "format": "number"
        },
        "arduinoVoltage": {
          "type": "number",
          "description": "The reference voltage for the Arduino in voltage mode.",
          "format": "number"
        },
        "ownerId": {
          "type": "string",
          "description": "The UID of the user who owns this configuration."
        }
      },
      "required": [
        "id",
        "mode",
        "unit",
        "minValue",
        "maxValue",
        "arduinoVoltage",
        "ownerId"
      ]
    },
    "LeakAnalysis": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "LeakAnalysis",
      "type": "object",
      "description": "Represents the result of a leak analysis performed on sensor data.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the leak analysis."
        },
        "analysisModel": {
          "type": "string",
          "description": "The analysis model used for leak detection (linear_leak, nonlinear_leak).",
          "format": "string"
        },
        "startThreshold": {
          "type": "number",
          "description": "The start threshold value for the leak analysis.",
          "format": "number"
        },
        "endThreshold": {
          "type": "number",
          "description": "The end threshold value for the leak analysis.",
          "format": "number"
        },
        "sensitivity": {
          "type": "number",
          "description": "The sensitivity value (RÂ²) used for the leak analysis.",
          "format": "number"
        },
        "result": {
          "type": "string",
          "description": "The result of the leak analysis (e.g., Leak Likely, Diffusion Likely).",
          "format": "string"
        },
        "analyzedRange": {
          "type": "string",
          "description": "A description of data range that was used when running the leak analysis tool.",
          "format": "string"
        }
      },
      "required": [
        "id",
        "analysisModel",
        "startThreshold",
        "endThreshold",
        "sensitivity",
        "result"
      ]
    },
    "Product": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Product",
      "type": "object",
      "description": "Represents a product that can be tested.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the product."
        },
        "name": {
          "type": "string",
          "description": "The name of the product."
        }
      },
      "required": [
        "id",
        "name"
      ]
    },
    "TestBench": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "TestBench",
      "type": "object",
      "description": "Represents a physical test bench where tests are conducted.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the test bench."
        },
        "name": {
          "type": "string",
          "description": "The name of the test bench."
        },
        "location": {
          "type": "string",
          "description": "The physical location of the test bench (e.g., Lab A, Room 101)."
        },
        "description": {
          "type": "string",
          "description": "A brief description of the test bench's capabilities."
        }
      },
      "required": [
        "id",
        "name"
      ]
    },
    "User": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "User",
      "type": "object",
      "description": "Represents a user profile.",
      "properties": {
        "id": {
          "type": "string",
          "description": "The user's unique ID, matching their Firebase Auth UID."
        },
        "username": {
          "type": "string",
          "description": "The user's chosen username."
        },
        "email": {
          "type": "string",
          "description": "The user's email address."
        },
        "role": {
          "type": "string",
          "description": "The user's role (e.g., 'user', 'superadmin')."
        }
      },
      "required": ["id", "username", "email", "role"]
    },
    "MLModel": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "MLModel",
      "type": "object",
      "description": "Represents a machine learning model.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the ML model."
        },
        "name": {
          "type": "string",
          "description": "The name of the model."
        },
        "version": {
          "type": "string",
          "description": "The version of the model."
        },
        "description": {
          "type": "string",
          "description": "A brief description of the model."
        },
        "fileSize": {
          "type": "number",
          "description": "The size of the model file in bytes."
        }
      },
      "required": [
        "id",
        "name",
        "version"
      ]
    },
    "TrainDataSet": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "TrainDataSet",
      "type": "object",
      "description": "Represents a training data set for machine learning models.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the training data set."
        },
        "name": {
          "type": "string",
          "description": "The name of the training data set."
        }
      },
      "required": [
        "id",
        "name"
      ]
    },
    "TestSession": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "TestSession",
      "type": "object",
      "description": "Represents a single test session for a product.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the test session."
        },
        "productId": {
          "type": "string",
          "description": "The ID of the product being tested."
        },
        "testBenchId": {
          "type": "string",
          "description": "The ID of the test bench where the session occurred."
        },
        "sensorConfigurationId": {
          "type": "string",
          "description": "The ID of the sensor configuration used for the session."
        },
        "userId": {
          "type": "string",
          "description": "The ID of the user who initiated the session."
        },
        "startTime": {
          "type": "string",
          "format": "date-time",
          "description": "The start time of the test session."
        },
        "endTime": {
          "type": "string",
          "format": "date-time",
          "description": "The end time of the test session."
        },
        "status": {
          "type": "string",
          "description": "The status of the session (e.g., RUNNING, COMPLETED, SCRAPPED)."
        }
      },
      "required": [
        "id",
        "productId",
        "testBenchId",
        "sensorConfigurationId",
        "userId",
        "startTime",
        "status"
      ]
    }
  },
  "auth": {
    "providers": [
      "password",
      "anonymous"
    ]
  },
  "firestore": {
    "structure": [
      {
        "collection": "/users/{userId}",
        "schema": "User",
        "description": "User profiles are publicly readable for username lookups and filtering. Users can create their own profile upon signup. Profile updates can be done by the owner or a superadmin. Deletion is restricted to superadmins, who cannot delete their own profile.",
        "permissions": {
          "read": "if true;",
          "write": "if (request.method == 'create' && request.auth.uid == userId) || (request.method == 'update' && (request.auth.uid == userId || get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'superadmin')) || (request.method == 'delete' && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'superadmin' && request.auth.uid != userId);"
        }
      },
      {
        "collection": "/products/{productId}",
        "schema": "Product",
        "description": "The product catalog is publicly viewable. Authenticated users can add new products, but only superadmins can modify or delete existing ones.",
        "permissions": {
          "read": "if true;",
          "write": "if request.auth != null && (request.method == 'create' || (request.method == 'update' || request.method == 'delete') && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'superadmin');"
        }
      },
      {
        "collection": "/testbenches/{testBenchId}",
        "schema": "TestBench",
        "description": "Test bench configurations are publicly viewable. Any authenticated user can create, update, or delete test benches.",
        "permissions": {
          "read": "if true;",
          "write": "if request.auth != null;"
        }
      },
      {
        "collection": "/sensor_configurations/{sensorConfigurationId}",
        "schema": "SensorConfiguration",
        "description": "Sensor configurations are publicly viewable. Authenticated users can create them. Only the owner or a superadmin can modify or delete them.",
        "permissions": {
          "read": "if true;",
          "write": "if request.auth != null && (request.method == 'create' || (request.method == 'update' || request.method == 'delete') && (request.auth.uid == resource.data.ownerId || get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'superadmin'));"
        }
      },
      {
        "collection": "/sensor_configurations/{sensorConfigurationId}/sensor_data/{sensorDataId}",
        "schema": "SensorReading",
        "description": "Sensor data is readable and writable by any authenticated user. This allows for real-time data logging from any connected client.",
        "permissions": {
          "read": "if request.auth != null;",
          "write": "if request.auth != null;"
        }
      },
      {
        "collection": "/test_sessions/{testSessionId}",
        "schema": "TestSession",
        "description": "Test session metadata is publicly viewable. Any authenticated user can create, update, or delete test sessions.",
        "permissions": {
          "read": "if true;",
          "write": "if request.auth != null;"
        }
      },
      {
        "collection": "/mlModels/{mlModelId}",
        "schema": "MLModel",
        "description": "ML Models are publicly readable and writable by any user.",
        "permissions": {
          "read": "if true;",
          "write": "if true;"
        }
      },
      {
        "collection": "/trainDataSets/{trainDataSetId}",
        "schema": "TrainDataSet",
        "description": "Training datasets are publicly readable and writable by any user.",
        "permissions": {
          "read": "if true;",
          "write": "if true;"
        }
      }
    ]
  }
}

    