{
  "entities": {
    "SensorData": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "SensorData",
      "type": "object",
      "description": "Represents a single sensor reading at a specific point in time.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the sensor data entry."
        },
        "timestamp": {
          "type": "string",
          "description": "Timestamp of when the sensor data was recorded, in ISO 8601 format.",
          "format": "date-time"
        },
        "value": {
          "type": "number",
          "description": "The raw value recorded by the sensor."
        }
      },
      "required": [
        "id",
        "timestamp",
        "value"
      ]
    },
    "SensorConfiguration": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "SensorConfiguration",
      "type": "object",
      "description": "Represents the configuration settings applied to the sensor.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the sensor configuration."
        },
        "mode": {
          "type": "string",
          "description": "The display mode of the sensor (RAW, VOLTAGE, CUSTOM).",
          "format": "string"
        },
        "unit": {
          "type": "string",
          "description": "The unit of measurement for the sensor data."
        },
        "min": {
          "type": "number",
          "description": "The minimum value for custom sensor scaling."
        },
        "max": {
          "type": "number",
          "description": "The maximum value for custom sensor scaling."
        },
        "arduinoVoltage": {
          "type": "number",
          "description": "The reference voltage of the Arduino."
        }
      },
      "required": [
        "id",
        "mode",
        "unit",
        "min",
        "max",
        "arduinoVoltage"
      ]
    },
    "LeakAnalysis": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "LeakAnalysis",
      "type": "object",
      "description": "Represents the results of a leak analysis performed on sensor data.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the leak analysis result."
        },
        "analysisModel": {
          "type": "string",
          "description": "The type of analysis model used (linear_leak, nonlinear_leak)."
        },
        "startThreshold": {
          "type": "number",
          "description": "The starting threshold value for the analysis."
        },
        "endThreshold": {
          "type": "number",
          "description": "The ending threshold value for the analysis."
        },
        "sensitivity": {
          "type": "number",
          "description": "The sensitivity setting for the analysis (RÂ² value)."
        },
        "result": {
          "type": "string",
          "description": "The result of the leak analysis (Leak probable, Diffusion probable)."
        },
        "analyzedRange": {
          "type": "string",
          "description": "The range of data points analyzed."
        }
      },
      "required": [
        "id",
        "analysisModel",
        "startThreshold",
        "endThreshold",
        "sensitivity",
        "result",
        "analyzedRange"
      ]
    }
  },
  "auth": {
    "providers": [
      "password",
      "anonymous"
    ]
  },
  "firestore": {
    "structure": [
      {
        "path": "/sensor_data/{sensorDataId}",
        "definition": {
          "entityName": "SensorData",
          "schema": {
            "$ref": "#/backend/entities/SensorData"
          },
          "description": "Stores individual sensor readings. All authenticated users can delete.",
          "params": [
            {
              "name": "sensorDataId",
              "description": "Unique ID for each sensor data entry."
            }
          ]
        }
      },
      {
        "path": "/sensor_configurations/{sensorConfigurationId}",
        "definition": {
          "entityName": "SensorConfiguration",
          "schema": {
            "$ref": "#/backend/entities/SensorConfiguration"
          },
          "description": "Stores sensor configuration settings.",
          "params": [
            {
              "name": "sensorConfigurationId",
              "description": "Unique ID for each sensor configuration."
            }
          ]
        }
      },
      {
        "path": "/leak_analyses/{leakAnalysisId}",
        "definition": {
          "entityName": "LeakAnalysis",
          "schema": {
            "$ref": "#/backend/entities/LeakAnalysis"
          },
          "description": "Stores results from leak analyses. All authenticated users can delete.",
          "params": [
            {
              "name": "leakAnalysisId",
              "description": "Unique ID for each leak analysis result."
            }
          ]
        }
      }
    ],
    "reasoning": "Based on the requirements, the primary data storage needs are for sensor data, sensor configurations, and leak analysis results. All data is related, but segregating them into separate collections allows for better querying and security rule management. The user request to allow anyone to delete products can be generalized to say that all authenticated users should be able to delete sensor data and analyses, this can be acheived by removing any user-specific access controls on these items.\n\n**Authorization Independence:**\n*   No authorization fields need to be denormalized, as there are no user-specific restrictions on data access as requested. All authenticated users can delete sensor data and leak analyses.\n\n**QAPs (Query and Presentation Support):**\n*   The structure allows for efficient querying of sensor data, configurations, and analysis results.\n*   Segregation allows listing of all sensor data, configurations, and analysis results (subject to volume limits), as needed.\n\n"
  }
}