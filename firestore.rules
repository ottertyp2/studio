/**
 * @fileoverview Firestore Security Rules for BioThrust Dashboard.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model, ensuring that only authenticated users can access their own data.
 *
 * Data Structure:
 * All data is nested under /users/{userId}, isolating data per user. This includes sensor configurations, sensor data, test sessions, and analysis results.
 *
 * Key Security Decisions:
 * - Users can only access their own data.
 * - Listing of users is explicitly denied (as per the reported error).
 *
 * Denormalization for Authorization:
 *  - The data model uses path-based ownership, eliminating the need for `get()` calls in rules. The `userId` is already available in the path.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Prevents listing all users in the 'users' collection.
     * @path /databases/{database}/documents/users
     * @allow (get) Allow the retrieval of a specific user document if the user is authenticated (but path is likely wrong)
     * @deny (list) Listing all users is not permitted.
     * @principle Prevents unauthorized enumeration of users.
     */
    match /users {
      allow get: if isSignedIn();
      allow list: if false;
    }

    /**
     * @description Enforces access control for sensor data points under a specific user and sensor configuration.
     * @path /users/{userId}/sensor_configurations/{sensorConfigurationId}/sensor_data/{sensorDataId}
     * @allow (create) Allow creation if the user is signed in and matches the userId.
     * @allow (get) Allow retrieval if the user is signed in and matches the userId.
     * @allow (list) Allow listing if the user is signed in and matches the userId.
     * @allow (update) Allow updating if the user is signed in, matches the userId, and the document exists.
     * @allow (delete) Allow deletion if the user is signed in, matches the userId, and the document exists.
     * @deny (create) Deny creation if the user is not signed in or doesn't match the userId.
     * @deny (get) Deny retrieval if the user is not signed in or doesn't match the userId.
     * @deny (list) Deny listing if the user is not signed in or doesn't match the userId.
     * @deny (update) Deny updating if the user is not signed in, doesn't match the userId, or the document doesn't exist.
     * @deny (delete) Deny deletion if the user is not signed in, doesn't match the userId, or the document doesn't exist.
     * @principle Enforces document ownership for writes, restricts access to a user's own data tree.
     */
    match /users/{userId}/sensor_configurations/{sensorConfigurationId}/sensor_data/{sensorDataId} {
      allow create: if isSignedIn() && isOwner(userId);
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Enforces access control for sensor configurations owned by a specific user.
     * @path /users/{userId}/sensor_configurations/{sensorConfigurationId}
     * @allow (create) Allow creation if the user is signed in and matches the userId.
     * @allow (get) Allow retrieval if the user is signed in and matches the userId.
     * @allow (list) Allow listing if the user is signed in and matches the userId.
     * @allow (update) Allow updating if the user is signed in, matches the userId, and the document exists.
     * @allow (delete) Allow deletion if the user is signed in, matches the userId, and the document exists.
     * @deny (create) Deny creation if the user is not signed in or doesn't match the userId.
     * @deny (get) Deny retrieval if the user is not signed in or doesn't match the userId.
     * @deny (list) Deny listing if the user is not signed in or doesn't match the userId.
     * @deny (update) Deny updating if the user is not signed in, doesn't match the userId, or the document doesn't exist.
     * @deny (delete) Deny deletion if the user is not signed in, doesn't match the userId, or the document doesn't exist.
     * @principle Enforces document ownership for writes, restricts access to a user's own data tree.
     */
    match /users/{userId}/sensor_configurations/{sensorConfigurationId} {
      allow create: if isSignedIn() && isOwner(userId);
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Enforces access control for leak analysis results generated from a user's sensor data.
     * @path /users/{userId}/analysis_results/{analysisResultId}
     * @allow (create) Allow creation if the user is signed in and matches the userId.
     * @allow (get) Allow retrieval if the user is signed in and matches the userId.
     * @allow (list) Allow listing if the user is signed in and matches the userId.
     * @allow (update) Allow updating if the user is signed in, matches the userId, and the document exists.
     * @allow (delete) Allow deletion if the user is signed in, matches the userId, and the document exists.
     * @deny (create) Deny creation if the user is not signed in or doesn't match the userId.
     * @deny (get) Deny retrieval if the user is not signed in or doesn't match the userId.
     * @deny (list) Deny listing if the user is not signed in or doesn't match the userId.
     * @deny (update) Deny updating if the user is not signed in, doesn't match the userId, or the document doesn't exist.
     * @deny (delete) Deny deletion if the user is not signed in, doesn't match the userId, or the document doesn't exist.
     * @principle Enforces document ownership for writes, restricts access to a user's own data tree.
     */
    match /users/{userId}/analysis_results/{analysisResultId} {
      allow create: if isSignedIn() && isOwner(userId);
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Enforces access control for test sessions for a user, linking a product to a set of sensor data.
     * @path /users/{userId}/test_sessions/{testSessionId}
     * @allow (create) Allow creation if the user is signed in and matches the userId.
     * @allow (get) Allow retrieval if the user is signed in and matches the userId.
     * @allow (list) Allow listing if the user is signed in and matches the userId.
     * @allow (update) Allow updating if the user is signed in, matches the userId, and the document exists.
     * @allow (delete) Allow deletion if the user is signed in, matches the userId, and the document exists.
     * @deny (create) Deny creation if the user is not signed in or doesn't match the userId.
     * @deny (get) Deny retrieval if the user is not signed in or doesn't match the userId.
     * @deny (list) Deny listing if the user is not signed in or doesn't match the userId.
     * @deny (update) Deny updating if the user is not signed in, doesn't match the userId, or the document doesn't exist.
     * @deny (delete) Deny deletion if the user is not signed in, doesn't match the userId, or the document doesn't exist.
     */
    match /users/{userId}/test_sessions/{testSessionId} {
        allow create: if isSignedIn() && isOwner(userId);
        allow get: if isSignedIn() && isOwner(userId);
        allow list: if isSignedIn() && isOwner(userId);
        allow update: if isSignedIn() && isExistingOwner(userId);
        allow delete: if isSignedIn() && isExistingOwner(userId);
    }
  }

  // Helper functions
  function isSignedIn() {
    return request.auth != null;
  }

  function isOwner(userId) {
    return request.auth.uid == userId;
  }

  function isExistingOwner(userId) {
    return isSignedIn() && isOwner(userId) && resource != null;
  }
}