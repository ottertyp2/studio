/**
 * @fileoverview Firestore Security Rules for Prototyping.
 *
 * Core Philosophy:
 * This ruleset allows full read access to all users and authenticated write access.
 * This configuration is unsafe for production and should only be used for rapid prototyping.
 * It prioritizes ease of development over strong access control.
 *
 * Data Structure:
 * Data is stored in top-level collections: /users, /sensor_configurations,
 * /analysis_results, /test_sessions, and /products.  Subcollections are used under
 * /sensor_configurations for /sensor_data.
 *
 * Key Security Decisions:
 * - Listing of users is disallowed to protect user privacy.
 * - All other collections are publicly readable.
 * - Write access is restricted to authenticated users.
 *
 * Denormalization for Authorization:
 * Not applicable in this prototype ruleset. Authentication is only used for write access.
 *
 * Structural Segregation:
 * Not applicable as all collections are global.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Manages user profile data.
     * @path /users/{userId}
     * @allow (create) - Authenticated user can create their own user document.
     * @allow (get) - Any user can read a user document.
     * @deny (list) - Listing all users is prohibited.
     * @deny (update) - No user can update any user documents.
     * @deny (delete) - No user can delete any user documents.
     * @principle Allows authenticated users to create own account. Prevents listing all users.
     */
    match /users/{userId} {
      allow get: if true;
      allow list: if false;
      allow create: if isSignedIn();
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Manages sensor configurations.
     * @path /sensor_configurations/{sensorConfigurationId}
     * @allow (create) - Authenticated user can create a sensor configuration.
     * @allow (get) - Any user can read a sensor configuration.
     * @allow (list) - Any user can list all sensor configurations.
     * @allow (update) - No user can update any sensor configuration.
     * @allow (delete) - No user can delete any sensor configuration.
     * @principle Allows authenticated users to create sensor configurations. Allows public read access.
     */
    match /sensor_configurations/{sensorConfigurationId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn();
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Manages sensor data within a sensor configuration.
     * @path /sensor_configurations/{sensorConfigurationId}/sensor_data/{sensorDataId}
     * @allow (create) - Authenticated user can create sensor data.
     * @allow (get) - Any user can read sensor data.
     * @allow (list) - Any user can list sensor data.
     * @allow (update) - No user can update any sensor data.
     * @allow (delete) - No user can delete any sensor data.
     * @principle Allows authenticated users to create sensor data. Allows public read access.
     */
    match /sensor_configurations/{sensorConfigurationId}/sensor_data/{sensorDataId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn();
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Manages analysis results.
     * @path /analysis_results/{analysisResultId}
     * @allow (create) - Authenticated user can create an analysis result.
     * @allow (get) - Any user can read an analysis result.
     * @allow (list) - Any user can list analysis results.
     * @allow (update) - No user can update any analysis result.
     * @allow (delete) - No user can delete any analysis result.
     * @principle Allows authenticated users to create analysis results. Allows public read access.
     */
    match /analysis_results/{analysisResultId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn();
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Manages test sessions.
     * @path /test_sessions/{testSessionId}
     * @allow (create) - Authenticated user can create a test session.
     * @allow (get) - Any user can read a test session.
     * @allow (list) - Any user can list test sessions.
     * @allow (update) - No user can update any test session.
     * @allow (delete) - No user can delete any test session.
     * @principle Allows authenticated users to create test sessions. Allows public read access.
     */
    match /test_sessions/{testSessionId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn();
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Manages products.
     * @path /products/{productId}
     * @allow (create) - Authenticated user can create a product.
     * @allow (get) - Any user can read a product.
     * @allow (list) - Any user can list products.
     * @allow (update) - No user can update any product.
     * @allow (delete) - No user can delete any product.
     * @principle Allows authenticated users to create products. Allows public read access.
     */
    match /products/{productId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn();
      allow update: if false;
      allow delete: if false;
    }

    function isSignedIn() {
      return request.auth != null;
    }
  }
}