/**
 * @fileOverview Firestore Security Rules for the BioThrust Dashboard application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model where each user has exclusive
 * access to their own data, ensuring data privacy and security.
 *
 * Data Structure:
 * All data is nested under /users/{userId}, creating a clear hierarchical structure
 * that simplifies security rules and enhances data isolation. The subcollections include:
 * - /sensor_configurations/{sensorConfigurationId}: Stores sensor configurations.
 * - /sensor_configurations/{sensorConfigurationId}/sensor_data/{sensorDataId}: Stores sensor data points.
 * - /analysis_results/{analysisResultId}: Stores leak analysis results.
 * - /test_sessions/{testSessionId}: Stores test sessions.
 *
 * Key Security Decisions:
 * - User Listing Denied: Listing all users is explicitly denied to prevent information leakage.
 * - Path-Based Ownership: All access control is based on the /users/{userId} path,
 *   where {userId} must match the authenticated user's UID. This ensures that users
 *   can only access their own data.
 *
 * Denormalization for Authorization:
 * This ruleset avoids `get()` calls by relying exclusively on path-based authorization.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Prevents listing all users in the database.
     * @path /users
     * @allow None. Listing users is not permitted.
     * @deny Any attempt to list users.
     * @principle Prevents information leakage by disallowing user enumeration.
     */
    match /users {
      allow list: if false;
    }

    /**
     * @description Enforces user-ownership for sensor configurations, sensor data, analysis results and test sessions.
     * @path /users/{userId}
     * @allow (read, create, update, delete) Only if the authenticated user's UID matches the {userId} path parameter.
     * @deny (read, create, update, delete) If the authenticated user's UID does not match the {userId} path parameter.
     * @principle Restricts access to a user's own data tree.
     */
    match /users/{userId} {
        function isSignedIn() {
            return request.auth != null;
        }

        function isOwner(userId) {
            return request.auth.uid == userId;
        }

        allow get: if isSignedIn() && isOwner(userId);
        allow list: if false;

        match /sensor_configurations/{sensorConfigurationId} {
            /**
             * @description Manages sensor configurations owned by a specific user.
             * @path /users/{userId}/sensor_configurations/{sensorConfigurationId}
             * @allow (create) If the authenticated user is the owner and the user id matches the path.
             * @allow (get, list, update, delete) If the authenticated user is the owner.
             * @deny (create, get, list, update, delete) If the authenticated user is not the owner.
             * @principle Enforces document ownership for writes and restricts access to the owner.
             */
            allow create: if isSignedIn() && isOwner(userId);
            allow get: if isSignedIn() && isOwner(userId);
            allow list: if isSignedIn() && isOwner(userId);
            allow update: if isSignedIn() && isOwner(userId);
            allow delete: if isSignedIn() && isOwner(userId);

             match /sensor_data/{sensorDataId} {
                /**
                 * @description Manages sensor data points associated with a specific sensor configuration owned by a user.
                 * @path /users/{userId}/sensor_configurations/{sensorConfigurationId}/sensor_data/{sensorDataId}
                 * @allow (create) If the authenticated user is the owner.
                 * @allow (get, list, update, delete) If the authenticated user is the owner.
                 * @deny (create, get, list, update, delete) If the authenticated user is not the owner.
                 * @principle Enforces document ownership for writes and restricts access to the owner.
                 */
                allow create: if isSignedIn() && isOwner(userId);
                allow get: if isSignedIn() && isOwner(userId);
                allow list: if isSignedIn() && isOwner(userId);
                allow update: if isSignedIn() && isOwner(userId);
                allow delete: if isSignedIn() && isOwner(userId);
            }
        }

        match /analysis_results/{analysisResultId} {
            /**
             * @description Manages leak analysis results generated from a user's sensor data.
             * @path /users/{userId}/analysis_results/{analysisResultId}
             * @allow (create) If the authenticated user is the owner.
             * @allow (get, list, update, delete) If the authenticated user is the owner.
             * @deny (create, get, list, update, delete) If the authenticated user is not the owner.
             * @principle Enforces document ownership for writes and restricts access to the owner.
             */
            allow create: if isSignedIn() && isOwner(userId);
            allow get: if isSignedIn() && isOwner(userId);
            allow list: if isSignedIn() && isOwner(userId);
            allow update: if isSignedIn() && isOwner(userId);
            allow delete: if isSignedIn() && isOwner(userId);
        }

        match /test_sessions/{testSessionId} {
             /**
              * @description Manages test sessions for a user, linking a product to a set of sensor data.
              * @path /users/{userId}/test_sessions/{testSessionId}
              * @allow (create) If the authenticated user is the owner.
              * @allow (get, list, update, delete) If the authenticated user is the owner.
              * @deny (create, get, list, update, delete) If the authenticated user is not the owner.
              * @principle Enforces document ownership for writes and restricts access to the owner.
              */
            allow create: if isSignedIn() && isOwner(userId);
            allow get: if isSignedIn() && isOwner(userId);
            allow list: if isSignedIn() && isOwner(userId);
            allow update: if isSignedIn() && isOwner(userId);
            allow delete: if isSignedIn() && isOwner(userId);
        }
    }
  }
}