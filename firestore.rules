/**
 * @fileoverview Firestore Security Rules for BioThrust Dashboard.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model, ensuring that only authenticated users can access their own data.
 *
 * Data Structure:
 * All data is nested under /users/{userId}, with further subcollections for sensor configurations, sensor data, analysis results, and test sessions.
 *
 * Key Security Decisions:
 * - Users can only access their own data.
 * - Data validation is minimal to allow rapid prototyping and iteration.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is made by a signed-in user.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user ID matches the provided user ID.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user ID matches the provided user ID and the resource exists.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && exists(resource.data);
    }

    /**
     * @description Rules for user documents.
     * @path /users/{userId}
     * @allow (create) User with UID 'user123' can create their own user document.
     * @deny (create) User with UID 'user456' cannot create a user document with ID 'user123'.
     * @principle Enforces user-ownership for data access.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for sensor configurations.
     * @path /users/{userId}/sensor_configurations/{sensorConfigurationId}
     * @allow (create) User with UID 'user123' can create a sensor configuration under their user ID.
     * @deny (update) User with UID 'user456' cannot update a sensor configuration under user ID 'user123'.
     * @principle Enforces user-ownership for data access.
     */
    match /users/{userId}/sensor_configurations/{sensorConfigurationId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for sensor data.
     * @path /users/{userId}/sensor_configurations/{sensorConfigurationId}/sensor_data/{sensorDataId}
     * @allow (create) User with UID 'user123' can create sensor data under their sensor configuration.
     * @deny (delete) User with UID 'user456' cannot delete sensor data under user ID 'user123'.
     * @principle Enforces user-ownership for data access.
     */
    match /users/{userId}/sensor_configurations/{sensorConfigurationId}/sensor_data/{sensorDataId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for analysis results.
     * @path /users/{userId}/analysis_results/{analysisResultId}
     * @allow (create) User with UID 'user123' can create an analysis result under their user ID.
     * @deny (update) User with UID 'user456' cannot update an analysis result under user ID 'user123'.
     * @principle Enforces user-ownership for data access.
     */
    match /users/{userId}/analysis_results/{analysisResultId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

      /**
     * @description Rules for test sessions.
     * @path /users/{userId}/test_sessions/{testSessionId}
     * @allow (create) User with UID 'user123' can create a test session under their user ID.
     * @deny (update) User with UID 'user456' cannot update a test session under user ID 'user123'.
     * @principle Enforces user-ownership for data access.
     */
    match /users/{userId}/test_sessions/{testSessionId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }
  }
}