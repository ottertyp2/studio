rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper Functions
    function isSignedIn() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }
    
    function isExistingOwner(userId) {
      return isOwner(userId) && resource.data.id == userId;
    }

    function isSuperAdmin() {
      return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'superadmin';
    }

    // User profiles can be read by anyone, but only created/updated by the owner.
    // Superadmins can update any user's role and delete users (but not themselves).
    match /users/{userId} {
      allow get, list: if true;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if (isExistingOwner(userId) && request.resource.data.id == resource.data.id) || isSuperAdmin();
      allow delete: if isSuperAdmin() && request.auth.uid != userId;
    }

    // All other collections are locked down by default for this example.
    // You would add rules for sensor_configurations, test_sessions, etc. here.
    // For now, allowing admin read/write for simplicity.
    match /{document=**} {
      allow read, write: if isSuperAdmin();
    }
  }
}
