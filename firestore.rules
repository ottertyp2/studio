/**
 * @description This ruleset enforces a public-access model. All data is stored in global collections, removing any user-specific restrictions.
 * @dataStructure
 *  - /users/{userId}: Stores user profile information.  Write access is restricted to the owner; read access is public.
 *  - /sensor_configurations/{sensorConfigurationId}/sensor_data/{sensorDataId}: Stores sensor data points.  Read and write access are public.
 *  - /sensor_configurations/{sensorConfigurationId}: Stores sensor configurations.  Read and write access are public.
 *  - /analysis_results/{analysisResultId}: Stores analysis results. Read and write access are public.
 *  - /test_sessions/{testSessionId}: Stores test sessions. Read and write access are public.
 * @keySecurityDecisions
 *  - User listing is disallowed.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Manages user profile information.  Allows a user to create their own profile.
     * @path /users/{userId}
     * @allow (create) User with UID 'user_abc' can create their own profile at /users/user_abc.
     * @deny (create) User with UID 'user_abc' cannot create a profile at /users/user_xyz.
     * @allow (get) Any user can retrieve any user profile.
     * @allow (update) User with UID 'user_abc' can update their own profile at /users/user_abc.
     * @deny (update) User with UID 'user_abc' cannot update profile at /users/user_xyz.
     * @allow (delete) User with UID 'user_abc' can delete their own profile at /users/user_abc.
     * @deny (delete) User with UID 'user_abc' cannot delete profile at /users/user_xyz.
     * @principle Enforces document ownership for writes; public reads.
     */
    match /users/{userId} {
      allow get: if true;
      allow list: if false;

      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Manages sensor data points associated with a specific sensor configuration.
     * @path /sensor_configurations/{sensorConfigurationId}/sensor_data/{sensorDataId}
     * @allow (create) Any user can create sensor data.
     * @allow (get) Any user can read sensor data.
     * @allow (list) Any user can list sensor data.
     * @allow (update) Any user can update sensor data.
     * @allow (delete) Any user can delete sensor data.
     * @principle Allows public read and write access.
     */
    match /sensor_configurations/{sensorConfigurationId}/sensor_data/{sensorDataId} {
      allow get, list: if true;
      allow create, update, delete: if true;
    }

    /**
     * @description Manages sensor configurations.
     * @path /sensor_configurations/{sensorConfigurationId}
     * @allow (create) Any user can create a sensor configuration.
     * @allow (get) Any user can read a sensor configuration.
     * @allow (list) Any user can list sensor configurations.
     * @allow (update) Any user can update a sensor configuration.
     * @allow (delete) Any user can delete a sensor configuration.
     * @principle Allows public read and write access.
     */
    match /sensor_configurations/{sensorConfigurationId} {
      allow get, list: if true;
      allow create, update, delete: if true;
    }

    /**
     * @description Manages leak analysis results.
     * @path /analysis_results/{analysisResultId}
     * @allow (create) Any user can create an analysis result.
     * @allow (get) Any user can read an analysis result.
     * @allow (list) Any user can list analysis results.
     * @allow (update) Any user can update an analysis result.
     * @allow (delete) Any user can delete an analysis result.
     * @principle Allows public read and write access.
     */
    match /analysis_results/{analysisResultId} {
      allow get, list: if true;
      allow create, update, delete: if true;
    }

    /**
     * @description Manages test sessions.
     * @path /test_sessions/{testSessionId}
     * @allow (create) Any user can create a test session.
     * @allow (get) Any user can read a test session.
     * @allow (list) Any user can list test sessions.
     * @allow (update) Any user can update a test session.
     * @allow (delete) Any user can delete a test session.
     * @principle Allows public read and write access.
     */
    match /test_sessions/{testSessionId} {
      allow get, list: if true;
      allow create, update, delete: if true;
    }

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }
  }
}