/**
 * @fileoverview Firestore Security Rules for the application.
 *
 * Core Philosophy:
 * This ruleset assumes a PUBLIC access model for all data.  Any signed-in user can read or write all data. This is suitable for local testing or a fully public dashboard.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information (username, email, role).
 * - /sensor_configurations/{sensorConfigurationId}: Stores global sensor configurations.
 * - /sensor_configurations/{sensorConfigurationId}/sensor_data/{sensorDataId}: Stores sensor data points for a specific configuration.
 * - /analysis_results/{analysisResultId}: Stores global leak analysis results.
 * - /test_sessions/{testSessionId}: Stores all test sessions.
 *
 * Key Security Decisions:
 * - No user-specific data ownership. All data is globally accessible to authenticated users.
 * - No role-based access control (other than requiring the user to be signed in).
 * - All write operations are permitted by any signed-in user.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Allows any signed-in user to read or write user profile data.
     * @path /users/{userId}
     * @allow (get, list) When request.auth != null
     * @allow (create, update, delete) When request.auth != null
     * @deny (get, list) When request.auth == null
     * @deny (create, update, delete) When request.auth == null
     * @principle Allows any signed-in user to manage user profiles.
     */
    match /users/{userId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if isSignedIn();
    }

    /**
     * @description Allows any signed-in user to read or write sensor data points.
     * @path /sensor_configurations/{sensorConfigurationId}/sensor_data/{sensorDataId}
     * @allow (get, list) When request.auth != null
     * @allow (create, update, delete) When request.auth != null
     * @deny (get, list) When request.auth == null
     * @deny (create, update, delete) When request.auth == null
     * @principle Allows any signed-in user to manage sensor data points.
     */
    match /sensor_configurations/{sensorConfigurationId}/sensor_data/{sensorDataId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if isSignedIn();
    }

    /**
     * @description Allows any signed-in user to read or write sensor configurations.
     * @path /sensor_configurations/{sensorConfigurationId}
     * @allow (get, list) When request.auth != null
     * @allow (create, update, delete) When request.auth != null
     * @deny (get, list) When request.auth == null
     * @deny (create, update, delete) When request.auth == null
     * @principle Allows any signed-in user to manage sensor configurations.
     */
    match /sensor_configurations/{sensorConfigurationId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if isSignedIn();
    }

    /**
     * @description Allows any signed-in user to read or write analysis results.
     * @path /analysis_results/{analysisResultId}
     * @allow (get, list) When request.auth != null
     * @allow (create, update, delete) When request.auth != null
     * @deny (get, list) When request.auth == null
     * @deny (create, update, delete) When request.auth == null
     * @principle Allows any signed-in user to manage analysis results.
     */
    match /analysis_results/{analysisResultId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if isSignedIn();
    }

    /**
     * @description Allows any signed-in user to read or write test sessions.
     * @path /test_sessions/{testSessionId}
     * @allow (get, list) When request.auth != null
     * @allow (create, update, delete) When request.auth != null
     * @deny (get, list) When request.auth == null
     * @deny (create, update, delete) When request.auth == null
     * @principle Allows any signed-in user to manage test sessions.
     */
    match /test_sessions/{testSessionId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if isSignedIn();
    }
  }
}