/**
 * @file Firestore Security Rules
 * @version 2
 *
 * @description
 * Core Philosophy: This ruleset allows public read access and restricts write access. User profiles are created only during account creation and are managed by the system. Sensor configurations, analysis results, and test sessions are globally accessible with no specific ownership enforced.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information, with 'create' permission allowed only if the authenticated user's ID matches the 'userId'. Updates are disallowed.
 * - /sensor_configurations/{sensorConfigurationId}: Stores sensor configurations.
 * - /sensor_configurations/{sensorConfigurationId}/sensor_data/{sensorDataId}: Stores sensor data for each configuration.
 * - /analysis_results/{analysisResultId}: Stores the results of analysis.
 * - /test_sessions/{testSessionId}: Stores information of each test session.
 *
 * Key Security Decisions:
 * - User listing is disallowed.
 * - Data validation is not enforced beyond checking ownership on user creation.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profiles. Users can create their profile on sign-up, but updates are not allowed.
     * @path /users/{userId}
     * @allow (create) - User with UID 'user123' creates a profile with document ID 'user123'.
     * @deny (create) - User with UID 'user123' tries to create a profile with document ID 'otherUser'.
     * @deny (update) - Any user tries to update any user profile.
     * @principle Enforces user-ownership for profile creation and disallows updates.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow get: if false;
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Controls access to sensor data associated with a specific sensor configuration.
     * @path /sensor_configurations/{sensorConfigurationId}/sensor_data/{sensorDataId}
     * @allow (get, list) - Any user can read any sensor data.
     * @deny (create, update, delete) - No user can create, update, or delete sensor data.
     * @principle Allows public read access but restricts write access.
     */
    match /sensor_configurations/{sensorConfigurationId} {
      match /sensor_data/{sensorDataId} {
        allow get, list: if true;
        allow create, update, delete: if false;
      }
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Controls access to analysis results.
     * @path /analysis_results/{analysisResultId}
     * @allow (get, list) - Any user can read any analysis result.
     * @deny (create, update, delete) - No user can create, update, or delete analysis results.
     * @principle Allows public read access but restricts write access.
     */
    match /analysis_results/{analysisResultId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Controls access to test sessions.
     * @path /test_sessions/{testSessionId}
     * @allow (get, list) - Any user can read any test session.
     * @deny (create, update, delete) - No user can create, update, or delete test sessions.
     * @principle Allows public read access but restricts write access.
     */
    match /test_sessions/{testSessionId} {
        allow get, list: if true;
        allow create, update, delete: if false;
    }
  }
}