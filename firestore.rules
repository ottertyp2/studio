/**
 * @file Firestore Security Rules
 * @description This ruleset is designed for prototyping a public data model.
 *
 * Core Philosophy:
 * All data is accessible publicly for reading, but writes are restricted until proper authorization is implemented.
 *
 * Data Structure:
 * All data resides in top-level collections (e.g., /sensor_configurations/{sensorConfigurationId}).
 *
 * Key Security Decisions:
 * - Public read access is granted to all collections to facilitate rapid prototyping.
 * - All write operations are initially denied. As the app evolves, specific write rules must be added, likely based on user roles or ownership.
 * - User listing is implicitly denied due to the absence of rules for it (and the general principle of denying what isn't explicitly allowed).
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Manages user profile data.
     * @path /users/{userId}
     * @allow (get, list) User with any auth can read user profile data to facilitate rapid prototyping.
     * @deny (create, update, delete) No one can write user data until proper authorization is implemented.
     * @principle Public read, restricted writes for user profiles.
     */
    match /users/{userId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Implement authorization for user management
    }

    /**
     * @description Manages sensor data associated with a specific sensor configuration.
     * @path /sensor_configurations/{sensorConfigurationId}/sensor_data/{sensorDataId}
     * @allow (get, list) Any authenticated user can read sensor data.
     * @deny (create, update, delete) No one can write sensor data until proper authorization is implemented.
     * @principle Public read, restricted writes for sensor data.
     */
    match /sensor_configurations/{sensorConfigurationId}/sensor_data/{sensorDataId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Implement authorization for sensor data management
    }

    /**
     * @description Manages sensor configurations.
     * @path /sensor_configurations/{sensorConfigurationId}
     * @allow (get, list) Any authenticated user can read sensor configurations.
     * @deny (create, update, delete) No one can write sensor configuration data until proper authorization is implemented.
     * @principle Public read, restricted writes for sensor configurations.
     */
    match /sensor_configurations/{sensorConfigurationId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Implement authorization for sensor configuration management
    }

    /**
     * @description Manages leak analysis results.
     * @path /analysis_results/{analysisResultId}
     * @allow (get, list) Any authenticated user can read analysis results.
     * @deny (create, update, delete) No one can write analysis results until proper authorization is implemented.
     * @principle Public read, restricted writes for analysis results.
     */
    match /analysis_results/{analysisResultId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Implement authorization for analysis result management
    }

    /**
     * @description Manages test session data.
     * @path /test_sessions/{testSessionId}
     * @allow (get, list) Any authenticated user can read test session data.
     * @deny (create, update, delete) No one can write test session data until proper authorization is implemented.
     */
    match /test_sessions/{testSessionId} {
        allow get, list: if true;
        allow create, update, delete: if false; // TODO: Implement authorization for test session management
    }
  }
}