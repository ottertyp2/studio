/**
 * @fileoverview Firestore Security Rules for the application.
 *
 * Core Philosophy:
 * This ruleset is in prototyping mode. It prioritizes strict authorization while being permissive on data shapes for rapid iteration.
 * It enforces identity-based access control based on the currently signed-in user.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles.
 * - /sensor_configurations/{sensorConfigurationId}: Stores global sensor configurations.
 * - /sensor_configurations/{sensorConfigurationId}/sensor_data/{sensorDataId}: Stores sensor data related to a sensor configuration.
 * - /analysis_results/{analysisResultId}: Stores leak analysis results.
 * - /test_sessions/{testSessionId}: Stores test session data.
 *
 * Key Security Decisions:
 * - User listing is disallowed.
 * - Superadmin role is not currently enforced but the field exists on the user object.
 * - Data validation is minimal, focusing on authorization and relational integrity.
 *
 * Denormalization for Authorization:
 * - No denormalization is required as we are not using any collaboration or shared access patterns.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Manages user profiles, restricting access to the owning user.
     * @path /users/{userId}
     * @allow (create) Signed-in user creates their own profile.
     * @allow (get, update, delete) Signed-in user accesses their own profile.
     * @deny (create) Signed-in user attempts to create a profile for another user.
     * @deny (get, update, delete) Signed-in user attempts to access another user's profile.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isSignedIn() {
          return request.auth != null;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Manages sensor configurations. Read and write access are public.
     * @path /sensor_configurations/{sensorConfigurationId}
     * @allow (get, list) Any user can read sensor configurations.
     * @allow (create, update, delete) Any user can create, update, or delete sensor configurations.
     * @principle Open access for sensor configurations.
     */
    match /sensor_configurations/{sensorConfigurationId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Manages sensor data associated with a sensor configuration. Read and write access are public.
     * @path /sensor_configurations/{sensorConfigurationId}/sensor_data/{sensorDataId}
     * @allow (get, list) Any user can read sensor data.
     * @allow (create, update, delete) Any user can create, update, or delete sensor data.
     * @principle Open access for sensor data.
     */
    match /sensor_configurations/{sensorConfigurationId}/sensor_data/{sensorDataId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Manages analysis results. Read and write access are public.
     * @path /analysis_results/{analysisResultId}
     * @allow (get, list) Any user can read analysis results.
     * @allow (create, update, delete) Any user can create, update, or delete analysis results.
     * @principle Open access for analysis results.
     */
    match /analysis_results/{analysisResultId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Manages test sessions. Read and write access are public.
     * @path /test_sessions/{testSessionId}
     * @allow (get, list) Any user can read test sessions.
     * @allow (create, update, delete) Any user can create, update, or delete test sessions.
     * @principle Open access for test sessions.
     */
    match /test_sessions/{testSessionId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }
  }
}