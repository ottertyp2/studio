/**
 * @description This ruleset enforces a strict user-ownership model for all data stored in Firestore.
 * All data is nested under /users/{userId}, ensuring that only the authenticated user can access their own data.
 * @dataStructure
 * - /users/{userId}/sensor_configurations/{sensorConfigurationId}/sensor_data/{sensorDataId}: Stores individual sensor data points.
 * - /users/{userId}/sensor_configurations/{sensorConfigurationId}: Stores sensor configurations.
 * - /users/{userId}/analysis_results/{analysisResultId}: Stores analysis results.
 * - /users/{userId}/test_sessions/{testSessionId}: Stores test sessions.
 * @keySecurityDecisions
 * - User listing is implicitly denied.
 * - All write operations are restricted to the owner of the data.
 * - Data for each user is segregated by nesting it under their respective /users/{userId} path.
 * - No public data access is allowed.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if the user is signed in.
    function isSignedIn() {
      return request.auth != null;
    }

    // Helper function to check if the requesting user is the owner of the resource.
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    // Helper function to check if the requesting user is the owner of the resource and the resource exists.
    function isExistingOwner(userId) {
      return isSignedIn() && isOwner(userId) && exists(resource.data);
    }

    /**
     * @description Manages access to sensor data points associated with a specific sensor configuration owned by a user.
     * @path /users/{userId}/sensor_configurations/{sensorConfigurationId}/sensor_data/{sensorDataId}
     */
    match /users/{userId}/sensor_configurations/{sensorConfigurationId}/sensor_data/{sensorDataId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Manages access to sensor configurations owned by a specific user.
     * @path /users/{userId}/sensor_configurations/{sensorConfigurationId}
     */
    match /users/{userId}/sensor_configurations/{sensorConfigurationId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Manages access to leak analysis results generated from a user's sensor data.
     * @path /users/{userId}/analysis_results/{analysisResultId}
     */
    match /users/{userId}/analysis_results/{analysisResultId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Manages access to test sessions for a user, linking a product to a set of sensor data.
     * @path /users/{userId}/test_sessions/{testSessionId}
     */
    match /users/{userId}/test_sessions/{testSessionId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }
  }
}