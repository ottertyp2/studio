rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is authenticated.
     * @path N/A
     * @allow N/A
     * @deny N/A
     * @principle Authentication check.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the requested user ID matches the authenticated user's ID.
     * @path N/A
     * @allow N/A
     * @deny N/A
     * @principle Authorization check.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the requested user ID matches the authenticated user's ID and the resource exists.
     * @path N/A
     * @allow N/A
     * @deny N/A
     * @principle Authorization and existence check.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Rules for sensor data under a user's sensor configuration.
     * @path /users/{userId}/sensor_configurations/{sensorConfigurationId}/sensor_data/{sensorDataId}
     * @allow (create) User A creates sensor data under their own sensor configuration.
     * @deny (create) User A attempts to create sensor data under User B's sensor configuration.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/sensor_configurations/{sensorConfigurationId}/sensor_data/{sensorDataId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId == request.auth.uid);
      allow update: if isSignedIn() && isOwner(userId == request.auth.uid);
      allow delete: if isSignedIn() && isOwner(userId == request.auth.uid);
    }

    /**
     * @description Rules for sensor configurations under a user.
     * @path /users/{userId}/sensor_configurations/{sensorConfigurationId}
     * @allow (create) User A creates a sensor configuration under their own user ID.
     * @deny (create) User A attempts to create a sensor configuration under User B's user ID.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/sensor_configurations/{sensorConfigurationId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId == request.auth.uid);
      allow update: if isSignedIn() && isOwner(userId == request.auth.uid);
      allow delete: if isSignedIn() && isOwner(userId == request.auth.uid);
    }

    /**
     * @description Rules for analysis results under a user.
     * @path /users/{userId}/analysis_results/{analysisResultId}
     * @allow (create) User A creates an analysis result under their own user ID.
     * @deny (create) User A attempts to create an analysis result under User B's user ID.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/analysis_results/{analysisResultId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId == request.auth.uid);
      allow update: if isSignedIn() && isOwner(userId == request.auth.uid);
      allow delete: if isSignedIn() && isOwner(userId == request.auth.uid);
    }

     /**
      * @description Rules for test sessions under a user.
      * @path /users/{userId}/test_sessions/{testSessionId}
      * @allow (create) User A creates a test session under their own user ID.
      * @deny (create) User A attempts to create a test session under User B's user ID.
      * @principle Enforces document ownership for writes.
      */
    match /users/{userId}/test_sessions/{testSessionId} {
       allow get: if isSignedIn() && isOwner(userId);
       allow list: if isSignedIn() && isOwner(userId);
       allow create: if isSignedIn() && isOwner(userId == request.auth.uid);
       allow update: if isSignedIn() && isOwner(userId == request.auth.uid);
       allow delete: if isSignedIn() && isOwner(userId == request.auth.uid);
    }
  }
}