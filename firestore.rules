/**
 * @fileoverview Firestore Security Rules for Prototyping.
 *
 * Core Philosophy:
 * This ruleset defaults to a public-read, owner-write model where applicable, but with explicit denials for sensitive areas.
 * It prioritizes ease of development and iteration speed over fine-grained access control.  Schema validation is minimal.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles. Accessible only by the user themselves.
 * - /sensor_configurations/{sensorConfigurationId}: Stores sensor configurations. Publicly readable.
 * - /sensor_configurations/{sensorConfigurationId}/sensor_data/{sensorDataId}: Stores sensor data. Publicly readable.
 * - /analysis_results/{analysisResultId}: Stores analysis results. Publicly readable.
 * - /test_sessions/{testSessionId}: Stores test session data. Publicly readable.
 *
 * Key Security Decisions:
 * - User listing is disallowed.
 * - All top-level collections are publicly readable.
 * - Write access to top-level collections defaults to owner-only, based on an `ownerId` field. If this field is missing in the schema, writes are disallowed and a `// TODO` is added to signal the problem.
 *
 * Authorization Denormalization:
 * - To avoid costly `get()` calls in the rules, we rely on the client to include the authenticated user's ID in the document data (e.g., as an `ownerId` or `authorId` field) during creation.
 * - This denormalized ID is then used to enforce ownership on write operations.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile data.
     * @path /users/{userId}
     * @allow (get, list) User 'a29c789gx0QHISWZN3QNlmwOXG53' can read their own profile data.
     * @allow (create) User 'a29c789gx0QHISWZN3QNlmwOXG53' can create their own profile data.
     * @allow (update, delete) User 'a29c789gx0QHISWZN3QNlmwOXG53' can update and delete their own profile data.
     * @deny (get, list) User 'anotherUser' cannot read user 'a29c789gx0QHISWZN3QNlmwOXG53' profile data.
     * @deny (create, update, delete) User 'anotherUser' cannot modify user 'a29c789gx0QHISWZN3QNlmwOXG53' profile data.
     * @principle Enforces user-ownership: Only the authenticated user can read, create, update, or delete their own profile.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to sensor configurations.
     * @path /sensor_configurations/{sensorConfigurationId}
     * @allow (get, list) Any user can read sensor configurations.
     * @deny (create, update, delete) No one can create, update or delete sensor configurations.
     * @principle Public read, no write access.
     */
    match /sensor_configurations/{sensorConfigurationId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Controls access to sensor data under a specific sensor configuration.
     * @path /sensor_configurations/{sensorConfigurationId}/sensor_data/{sensorDataId}
     * @allow (get, list) Any user can read sensor data.
     * @deny (create, update, delete) No one can create, update or delete sensor data.
     * @principle Public read, no write access.
     */
    match /sensor_configurations/{sensorConfigurationId}/sensor_data/{sensorDataId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Controls access to analysis results.
     * @path /analysis_results/{analysisResultId}
     * @allow (get, list) Any user can read analysis results.
     * @deny (create, update, delete) No one can create, update or delete analysis results.
     * @principle Public read, no write access.
     */
    match /analysis_results/{analysisResultId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Controls access to test sessions.
     * @path /test_sessions/{testSessionId}
     * @allow (get, list) Any user can read test sessions.
     * @deny (create, update, delete) No one can create, update or delete test sessions.
     * @principle Public read, no write access.
     */
    match /test_sessions/{testSessionId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }
  }
}