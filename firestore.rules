/**
 * @fileoverview Firestore Security Rules for the Biothrust application.
 *
 * Core Philosophy:
 * This ruleset enforces a simplified security model suitable for prototyping, prioritizing authorization over strict schema validation.  It assumes a single-user or public-access model as defined in the documentation.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles. Write access is restricted to the user themselves during account creation only. Updates and Deletes are denied.
 * - /sensor_configurations/{sensorConfigurationId}: Stores global sensor configurations. Read and write access is completely public.
 * - /sensor_configurations/{sensorConfigurationId}/sensor_data/{sensorDataId}: Stores sensor data. Read and write access is completely public.
 * - /analysis_results/{analysisResultId}: Stores analysis results. Read and write access is completely public.
 * - /test_sessions/{testSessionId}: Stores test sessions. Read and write access is completely public.
 *
 * Key Security Decisions:
 * - User listing is disallowed.
 * - Schema validation is relaxed to allow for rapid prototyping. Only authorization-critical fields are validated.
 * - Read-only collections are handled with `allow get, list: if true;`.
 * - The default security posture for ambiguous relationships is strict denial.
 *
 * Denormalization for Authorization:
 * - User documents are named after the user's UID for easy authorization via `isOwner()`.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile data.
     * @path /users/{userId}
     * @allow (create) User with matching ID can create their own profile.
     * @deny (get, list, update, delete) No one can read, list, update, or delete user profiles after creation.
     * @principle Enforces user-ownership for account creation.  No one can update/delete after creation.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      allow get, list: if false;
      allow create: if isOwner(userId);
      allow update, delete: if false;
    }

    /**
     * @description Controls access to sensor configurations.
     * @path /sensor_configurations/{sensorConfigurationId}
     * @allow (get, list, create, update, delete) Anyone can read, list, create, update, and delete sensor configurations.
     * @principle Allows public access for all operations.
     */
    match /sensor_configurations/{sensorConfigurationId} {
      allow get, list: if true;
      allow create, update, delete: if true;
    }

    /**
     * @description Controls access to sensor data nested under sensor configurations.
     * @path /sensor_configurations/{sensorConfigurationId}/sensor_data/{sensorDataId}
     * @allow (get, list, create, update, delete) Anyone can read, list, create, update, and delete sensor data.
     * @principle Allows public access for all operations.
     */
    match /sensor_configurations/{sensorConfigurationId}/sensor_data/{sensorDataId} {
      allow get, list: if true;
      allow create, update, delete: if true;
    }

    /**
     * @description Controls access to analysis results.
     * @path /analysis_results/{analysisResultId}
     * @allow (get, list, create, update, delete) Anyone can read, list, create, update, and delete analysis results.
     * @principle Allows public access for all operations.
     */
    match /analysis_results/{analysisResultId} {
      allow get, list: if true;
      allow create, update, delete: if true;
    }

    /**
     * @description Controls access to test sessions.
     * @path /test_sessions/{testSessionId}
     * @allow (get, list, create, update, delete) Anyone can read, list, create, update, and delete test sessions.
     * @principle Allows public access for all operations.
     */
    match /test_sessions/{testSessionId} {
      allow get, list: if true;
      allow create, update, delete: if true;
    }
  }
}