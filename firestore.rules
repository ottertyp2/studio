rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     * @path N/A
     * @allow N/A
     * @deny N/A
     * @principle Authentication is required for all operations.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the requested user ID matches the authenticated user's ID.
     * @path /users/{userId}
     * @allow User with UID 'user123' (get, create, update, delete)
     * @deny User with UID 'user456' trying to access 'user123's data (get, create, update, delete)
     * @principle Enforces user-based ownership.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the user is the owner and the resource exists.
     * @path N/A
     * @allow N/A
     * @deny N/A
     * @principle Validates resource existence for update and delete operations.
     */
    function isExistingOwner(userId) {
        return isOwner(userId) && exists(resource.path);
    }

    /**
     * @description Prevents listing of the /users collection.
     * @path /users
     * @allow N/A
     * @deny Attempt to list all users.
     * @principle Prevents unauthorized user discovery.
     */
    match /users {
        allow get: if false;
        allow list: if false;
        allow create: if false;
        allow update: if false;
        allow delete: if false;
    }

    /**
     * @description Enforces user-ownership for all data nested under /users/{userId}.
     * @path /users/{userId}
     * @allow User with UID 'user123' (create) creates their own user document.
     * @deny User with UID 'user456' (create) tries to create a document under 'user123'.
     * @principle Data is isolated to authenticated user via path based ownership.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);

       /**
        * @description Manages sensor configurations for a user.
        * @path /users/{userId}/sensor_configurations/{sensorConfigurationId}
        * @allow User with UID 'user123' (create, get, update, delete) manages their own sensor configurations.
        * @deny User with UID 'user456' (create, get, update, delete) tries to manage 'user123's sensor configurations.
        * @principle Data is isolated to authenticated user via path based ownership.
        */
      match /sensor_configurations/{sensorConfigurationId} {
        allow get: if isOwner(userId);
        allow list: if false;
        allow create: if isOwner(userId);
        allow update: if isExistingOwner(userId);
        allow delete: if isExistingOwner(userId);

        /**
         * @description Manages sensor data points associated with a sensor configuration.
         * @path /users/{userId}/sensor_configurations/{sensorConfigurationId}/sensor_data/{sensorDataId}
         * @allow User with UID 'user123' (create, get, update, delete) manages their own sensor data.
         * @deny User with UID 'user456' (create, get, update, delete) tries to manage 'user123's sensor data.
         * @principle Data is isolated to authenticated user via path based ownership.
         */
        match /sensor_data/{sensorDataId} {
          allow get: if isOwner(userId);
          allow list: if false;
          allow create: if isOwner(userId);
          allow update: if isExistingOwner(userId);
          allow delete: if isExistingOwner(userId);
        }
      }

      /**
       * @description Manages analysis results for a user.
       * @path /users/{userId}/analysis_results/{analysisResultId}
       * @allow User with UID 'user123' (create, get, update, delete) manages their own analysis results.
       * @deny User with UID 'user456' (create, get, update, delete) tries to manage 'user123's analysis results.
       * @principle Data is isolated to authenticated user via path based ownership.
       */
      match /analysis_results/{analysisResultId} {
        allow get: if isOwner(userId);
        allow list: if false;
        allow create: if isOwner(userId);
        allow update: if isExistingOwner(userId);
        allow delete: if isExistingOwner(userId);
      }

      /**
       * @description Manages test sessions for a user.
       * @path /users/{userId}/test_sessions/{testSessionId}
       * @allow User with UID 'user123' (create, get, update, delete) manages their own test sessions.
       * @deny User with UID 'user456' (create, get, update, delete) tries to manage 'user123's test sessions.
       * @principle Data is isolated to authenticated user via path based ownership.
       */
      match /test_sessions/{testSessionId} {
        allow get: if isOwner(userId);
        allow list: if false;
        allow create: if isOwner(userId);
        allow update: if isExistingOwner(userId);
        allow delete: if isExistingOwner(userId);
      }
    }
  }
}