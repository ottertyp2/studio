
{
  "entities": {
    "User": {
      "title": "User",
      "type": "object",
      "description": "Represents a user in the system.",
      "properties": {
        "id": {
          "type": "string",
          "description": "The user's unique ID."
        },
        "username": {
            "type": "string",
            "description": "The user's unique username."
        },
        "email": {
          "type": "string",
          "format": "email",
          "description": "The user's email address."
        },
        "role": {
          "type": "string",
          "enum": ["user", "superadmin"],
          "description": "The user's role in the system."
        }
      },
      "required": ["id", "username", "email", "role"]
    },
    "SensorData": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "SensorData",
      "type": "object",
      "description": "Represents a single sensor data point.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the sensor data point."
        },
        "timestamp": {
          "type": "string",
          "description": "Timestamp of when the sensor data was recorded.",
          "format": "date-time"
        },
        "value": {
          "type": "number",
          "description": "The raw sensor value."
        },
        "convertedValue": {
          "type": "number",
          "description": "The sensor value after conversion (e.g., voltage, custom unit)."
        },
        "unit": {
          "type": "string",
          "description": "The unit of measurement for the sensor data (e.g., RAW, V, bar)."
        },
        "sensorConfigId": {
          "type": "string",
          "description": "Reference to SensorConfiguration."
        },
        "testSessionId": {
            "type": "string",
            "description": "Reference to the test session this data point belongs to."
        },
        "testBenchId": {
            "type": "string",
            "description": "Reference to the test bench this data point was recorded on."
        }
      },
      "required": [
        "id",
        "timestamp",
        "value",
        "convertedValue",
        "unit",
        "sensorConfigId",
        "testBenchId"
      ]
    },
    "SensorConfiguration": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "SensorConfiguration",
      "type": "object",
      "description": "Represents the configuration settings for a sensor.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the sensor configuration."
        },
        "name": {
            "type": "string"
        },
        "mode": {
          "type": "string",
          "description": "The display mode of the sensor (RAW, VOLTAGE, CUSTOM)."
        },
        "unit": {
            "type": "string"
        },
        "min": {
            "type": "number"
        },
        "max": {
            "type": "number"
        },
        "arduinoVoltage": {
          "type": "number",
          "description": "The reference voltage of the Arduino (used for voltage conversion)."
        },
        "adcBitResolution": {
          "type": "number",
          "description": "The bit resolution of the ADC (e.g., 10 for 0-1023, 12 for 0-4095)."
        },
        "decimalPlaces": {
            "type": "number"
        },
        "testBenchId": {
            "type": "string",
            "description": "Reference to the TestBench this configuration belongs to."
        }
      },
      "required": [
        "id",
        "mode",
        "testBenchId",
        "adcBitResolution"
      ]
    },
    "AnalysisResult": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "AnalysisResult",
      "type": "object",
      "description": "Represents the result of a leak analysis.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the analysis result."
        },
        "analysisModel": {
          "type": "string",
          "description": "The analysis model used (linear_leak, nonlinear_leak)."
        },
        "rSquared": {
          "type": "number",
          "description": "The R-squared value of the analysis."
        },
        "analyzedRangeStart": {
          "type": "string",
          "description": "Timestamp of the start of the analyzed data range.",
          "format": "date-time"
        },
        "analyzedRangeEnd": {
          "type": "string",
          "description": "Timestamp of the end of the analyzed data range.",
          "format": "date-time"
        },
        "isLeak": {
          "type": "boolean",
          "description": "Indicates whether a leak was detected."
        }
      },
      "required": [
        "id",
        "analysisModel",
        "rSquared",
        "analyzedRangeStart",
        "analyzedRangeEnd",
        "isLeak"
      ]
    },
    "TestSession": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "title": "TestSession",
        "type": "object",
        "description": "Represents a single test session for a specific vessel type.",
        "properties": {
            "id": { "type": "string", "description": "Unique identifier for the test session." },
            "vesselTypeId": { "type": "string", "description": "Reference to the vessel type being tested." },
            "vesselTypeName": { "type": "string", "description": "The name of the vessel type being tested." },
            "serialNumber": { "type": "string", "description": "The serial number of the vessel type instance." },
            "description": { "type": "string", "description": "A description of the test session." },
            "startTime": { "type": "string", "format": "date-time", "description": "Timestamp when the test started." },
            "endTime": { "type": "string", "format": "date-time", "description": "Timestamp when the test ended." },
            "status": { "type": "string", "enum": ["RUNNING", "COMPLETED", "SCRAPPED"], "description": "The status of the test session." },
            "testBenchId": { "type": "string", "description": "The test bench used for this test." },
            "sensorConfigurationId": { "type": "string", "description": "The sensor configuration used for this test." },
            "measurementType": { "type": "string", "enum": ["DEMO", "ARDUINO"], "description": "The source of the measurement data." },
            "userId": { "type": "string", "description": "The ID of the user who started the session." },
            "username": { "type": "string", "description": "The username of the user who started the session." },
            "demoOwnerInstanceId": { "type": "string", "description": "A unique ID for the client instance that started a demo session." },
            "classification": { "type": "string", "enum": ["LEAK", "DIFFUSION"], "description": "The classification of the test result (e.g. Leak, Diffusion)." },
            "batchId": { "type": "string", "description": "The batch this test belongs to." }
        },
        "required": ["id", "vesselTypeId", "vesselTypeName", "startTime", "status", "testBenchId", "sensorConfigurationId", "measurementType", "userId", "username", "batchId"]
    },
    "VesselType": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "title": "VesselType",
        "type": "object",
        "description": "Represents a vessel type that can be tested, including its test guidelines.",
        "properties": {
            "id": { "type": "string", "description": "Unique identifier for the vessel type." },
            "name": { "type": "string", "description": "The name of the vessel type." },
            "minCurve": {
                "type": "array",
                "description": "An array of points defining the minimum pressure curve guideline.",
                "items": {
                    "type": "object",
                    "properties": {
                        "x": { "type": "number", "description": "Time in seconds." },
                        "y": { "type": "number", "description": "Pressure value." }
                    },
                    "required": ["x", "y"]
                }
            },
            "maxCurve": {
                "type": "array",
                "description": "An array of points defining the maximum pressure curve guideline.",
                "items": {
                    "type": "object",
                    "properties": {
                        "x": { "type": "number", "description": "Time in seconds." },
                        "y": { "type": "number", "description": "Pressure value." }
                    },
                    "required": ["x", "y"]
                }
            }
        },
        "required": ["id", "name"]
    },
    "Batch": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Batch",
      "type": "object",
      "description": "Represents a production batch, associated with a Vessel Type.",
      "properties": {
        "id": { "type": "string", "description": "Unique identifier for the batch." },
        "name": { "type": "string", "description": "The name or identifier of the batch." },
        "vesselTypeId": { "type": "string", "description": "Reference to the Vessel Type this batch belongs to." }
      },
      "required": ["id", "name", "vesselTypeId"]
    },
    "TestBench": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "TestBench",
      "type": "object",
      "description": "Represents a physical test bench or sensor unit, now with live data fields.",
      "properties": {
          "id": { "type": "string", "description": "Unique identifier for the test bench." },
          "name": { "type": "string", "description": "The name of the test bench." },
          "location": { "type": "string", "description": "The physical location of the test bench." },
          "description": { "type": "string", "description": "A description of the test bench." },
          "liveSensorValue": { "type": "number", "description": "The latest sensor value pushed from the ESP32." },
          "valves": {
            "type": "object",
            "description": "Represents the live state of the valves.",
            "properties": {
                "VALVE1": { "type": "string", "enum": ["ON", "OFF"] },
                "VALVE2": { "type": "string", "enum": ["ON", "OFF"] }
            }
          },
           "commands": {
            "type": "object",
            "description": "Commands sent from the dashboard for the ESP32 to act upon.",
            "properties": {
                "VALVE1": { "type": "string", "enum": ["ON", "OFF"] },
                "VALVE2": { "type": "string", "enum": ["ON", "OFF"] }
            }
          }
      },
      "required": ["id", "name"]
    },
    "MLModel": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "MLModel",
      "type": "object",
      "description": "Represents metadata for a machine learning model.",
      "properties": {
        "id": { "type": "string", "description": "Unique identifier for the model." },
        "name": { "type": "string", "description": "The name of the model." },
        "version": { "type": "string", "description": "Model version string." },
        "description": { "type": "string", "description": "A brief description of the model." },
        "fileSize": { "type": "number", "description": "The size of the model file in bytes." }
      },
      "required": ["id", "name", "version"]
    },
    "TrainDataSet": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "TrainDataSet",
      "type": "object",
      "description": "Represents a training dataset, which could be a reference or stored data.",
      "properties": {
        "id": { "type": "string", "description": "Unique identifier for the dataset." },
        "name": { "type": "string", "description": "The name of the dataset." },
        "description": { "type": "string", "description": "A brief description of the dataset." },
        "storagePath": { "type": "string", "description": "Path to the dataset file in Firebase Storage, or a reference URL." }
      },
      "required": ["id", "name", "storagePath"]
    },
    "Report": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "title": "Report",
        "type": "object",
        "description": "Represents metadata for a generated PDF test report.",
        "properties": {
            "id": { "type": "string", "description": "Unique identifier for the report." },
            "testSessionId": { "type": "string", "description": "Reference to the test session this report is for." },
            "generatedAt": { "type": "string", "format": "date-time", "description": "Timestamp when the report was generated." },
            "downloadUrl": { "type": "string", "format": "uri", "description": "The public URL to download the report PDF from Firebase Storage." },
            "vesselTypeName": { "type": "string", "description": "The name of the vessel type from the session." },
            "serialNumber": { "type": "string", "description": "The serial number from the session." },
            "username": { "type": "string", "description": "The username of the user who performed the test." }
        },
        "required": ["id", "testSessionId", "generatedAt", "downloadUrl", "vesselTypeName", "username"]
    },
    "CrashReport": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "title": "CrashReport",
        "type": "object",
        "description": "Represents a crash/reconnect report from the Arduino device.",
        "properties": {
            "reason": { "type": "string", "description": "The primary reason for the reconnect event." },
            "timestamp": { "type": "number", "description": "Timestamp of the event." },
            "errors": {
                "type": "object",
                "properties": {
                    "latency": { "type": "number", "description": "Consecutive latency errors." },
                    "update": { "type": "number", "description": "Consecutive update errors." },
                    "stream": { "type": "number", "description": "Consecutive stream errors." }
                }
            },
            "totals": {
                "type": "object",
                "properties": {
                    "latency": { "type": "number", "description": "Total latency-triggered reconnects." },
                    "update": { "type": "number", "description": "Total update-triggered reconnects." },
                    "stream": { "type": "number", "description": "Total stream-triggered reconnects." }
                }
            }
        },
        "required": ["reason", "timestamp", "errors", "totals"]
    }
  },
  "auth": {
    "providers": [
      "email"
    ]
  },
  "firestore": {
    "structure": [
      {
        "path": "/users/{userId}",
        "definition": {
            "entityName": "User",
            "schema": {
                "$ref": "#/entities/User"
            },
            "description": "Stores user profile information and role."
        }
      },
      {
        "path": "/sensor_configurations/{sensorConfigurationId}/sensor_data/{sensorDataId}",
        "definition": {
          "entityName": "SensorData",
          "schema": {
            "$ref": "#/entities/SensorData"
          },
          "description": "Stores sensor data points associated with a specific sensor configuration."
        }
      },
      {
        "path": "/sensor_configurations/{sensorConfigurationId}",
        "definition": {
          "entityName": "SensorConfiguration",
          "schema": {
            "$ref": "#/entities/SensorConfiguration"
          },
          "description": "Stores all sensor configurations globally."
        }
      },
      {
        "path": "/testbenches/{testBenchId}",
        "definition": {
          "entityName": "TestBench",
          "schema": { "$ref": "#/entities/TestBench" },
          "description": "Stores all available test benches and their live data/commands."
        }
      },
      {
        "path": "/analysis_results/{analysisResultId}",
        "definition": {
          "entityName": "AnalysisResult",
          "schema": {
            "$ref": "#/entities/AnalysisResult"
          },
          "description": "Stores leak analysis results generated from sensor data."
        }
      },
       {
        "path": "/test_sessions/{testSessionId}",
        "definition": {
          "entityName": "TestSession",
          "schema": { "$ref": "#/entities/TestSession" },
          "description": "Stores all test sessions globally."
        }
      },
      {
        "path": "/vessel_types/{vesselTypeId}",
        "definition": {
            "entityName": "VesselType",
            "schema": { "$ref": "#/entities/VesselType" },
            "description": "Stores all available vessel types."
        }
      },
       {
        "path": "/batches/{batchId}",
        "definition": {
          "entityName": "Batch",
          "schema": { "$ref": "#/entities/Batch" },
          "description": "Stores all production batches."
        }
      },
      {
        "path": "/mlModels/{mlModelId}",
        "definition": {
            "entityName": "MLModel",
            "schema": { "$ref": "#/entities/MLModel" },
            "description": "Stores metadata for machine learning models."
        }
      },
      {
        "path": "/trainDataSets/{trainDataSetId}",
        "definition": {
            "entityName": "TrainDataSet",
            "schema": { "$ref": "#/entities/TrainDataSet" },
            "description": "Stores metadata for training datasets."
        }
      },
      {
        "path": "/reports/{reportId}",
        "definition": {
            "entityName": "Report",
            "schema": { "$ref": "#/entities/Report" },
            "description": "Stores metadata for generated PDF reports."
        }
      }
    ]
  },
  "rtdb": {
    "structure": [
        {
            "path": "/live",
            "description": "Live data from the ESP32 device, including valve and sequence status.",
            "properties": {
              "sensor": { "type": "number" },
              "valve1": { "type": "boolean" },
              "valve2": { "type": "boolean" },
              "recording": { "type": "boolean" },
              "sequence1_running": { "type": "boolean" },
              "sequence2_running": { "type": "boolean" },
              "lastUpdate": { "type": "string", "format": "date-time" },
              "disconnectCount": { "type": "number" },
              "latency": { "type": "number" }
            }
        },
        {
            "path": "/commands",
            "description": "Commands sent to the ESP32 device.",
            "properties": {
              "valve1": { "type": "boolean" },
              "valve2": { "type": "boolean" },
              "recording": { "type": "boolean" },
              "sequence1": { "type": "boolean" },
              "sequence2": { "type": "boolean" }
            }
        },
        {
            "path": "/system/lastCrashReport",
            "definition": {
                "entityName": "CrashReport",
                "schema": { "$ref": "#/entities/CrashReport" },
                "description": "The last crash/reconnect report from the ESP32."
            }
        }
    ]
  }
}
